<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="xinco" default="default" basedir=".">
    <description>Builds, tests, and runs the project xinco.</description>
    <property file="build.ant.properties"/>
    <property file="nbproject/project.properties"/>
    <property file="nbproject/private/private.properties"/>
    <property name="widget.dir" value="web/VAADIN/widgetsets"/>
    <import file="nbproject/build-impl.xml"/>
    <import file="build-widgetset.xml"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../Tools/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 
    -->
    <macrodef name="trim">
        <attribute name="input" />
        <attribute name="property" />
        <sequential>
            <tempfile property="temp.file" />
            <echo file="${temp.file}" message="@{input}" />
            <move file="${temp.file}" tofile="${temp.file}.2">
                <filterchain>
                    <trim/>
                </filterchain>
            </move>
            <loadfile property="@{property}" srcFile="${temp.file}.2" />
            <delete file="${temp.file}.2" failonerror="false" />
        </sequential>
    </macrodef>
    
    <trim input="xinco-DMS-${version_high}.${version_mid}.${version_low} ${version_postfix}" property="dist.name" />
    <trim input="XincoExplorerStandAlone-${version_high}.${version_mid}.${version_low} ${version_postfix}" property="standalone.dist.name" />
    
    <macrodef name="unsignjar">

        <attribute name="jar"/>

        <sequential>
            <!-- Remove any existing signatures from a JAR file. -->
            <tempfile prefix="usignjar-" destdir="${build.dir}/web/client" property="temp.file"/>
            <echo message="Removing signatures from JAR: @{jar}"/>
            <mkdir dir="${temp.file}"/>

            <unjar src="@{jar}" dest="${temp.file}">
                <patternset>
                    <include name="**"/>
                    <exclude name="META-INF/*.SF"/>
                    <exclude name="META-INF/*.DSA"/>
                    <exclude name="META-INF/*.RSA"/>
                </patternset>
            </unjar>

            <delete file="@{jar}" failonerror="true"/>

            <!-- Touch it in case the file didn't have a manifest.
             Otherwise the JAR task below will fail if the manifest
             file doesn't exist. -->
            <mkdir dir="${temp.file}/META-INF"/>
            <touch file="${temp.file}/META-INF/MANIFEST.MF"/>

            <jar destfile="@{jar}"
                 basedir="${temp.file}"
                 includes="**"
                 manifest="${temp.file}/META-INF/MANIFEST.MF"/>

            <delete dir="${temp.file}" failonerror="true"/>
        </sequential>
    </macrodef>

    <target name="unsign">
        <unsignjar jar="${jar}"/>
    </target>

    <target name="unsign_client_libraries" depends="init">
        <foreach target="unsign" param ="jar" inheritall="true">
            <path>
                <fileset dir="${build.dir}/web/client">
                    <include name="**/*.jar"/>
                </fileset>
            </path>
        </foreach>
    </target>
    
    <!--Unsign/sign client libraries as part of normal build process (i.e. deployment)
    It takes longer but the jnlp portion of the client will work from NetBeans deployed application.
    This is done with the release target so released software doesn't have this issue.
    
    Is a lot faster just to run XincoExplorer from within the IDE anyway.
    <target name="-pre-dist" depends="unsign_client_libraries, sign_client_libraries"/>
    -->

    <target name="sign_client_libraries" depends="init">
        <delete file="${keystore.file}"/>
        <!--Create keystore-->
        <genkey alias="${keystore.alias}" storepass="${keystore.password}"
                dname="${keystore.dname}"
                keystore="${keystore.file}"
                validity="365"/>
        <!--Sign libraries-->
        <signjar alias="${keystore.alias}" keystore="${keystore.file}" storepass="${keystore.password}">
            <fileset dir="${build.dir}/web/client">
                <include name="**/*.jar"/>
            </fileset>
        </signjar>
    </target>

    <target name="release" description="Create the release packages of Xinco" 
            depends="dist, unsign_client_libraries, sign_client_libraries, build-language-master-pack">
        <delete dir="${dist}/${dist.name}"/>
        <delete>
            <fileset dir="${dist}/" includes="**/*.zip"/>
        </delete>
        <!-- Create release folder-->
        <mkdir dir="${dist}/${dist.name}"/>
        <copy todir="${dist}/${dist.name}/db">
            <fileset dir="../DB">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist}/${dist.name}/docs">
            <fileset dir="../Docs">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist}/${dist.name}">
            <fileset dir="./release">
                <include name="*.txt"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <copy todir="${dist}/${dist.name}/key" file=".blueCubsKeystore"/>
        <copy todir="${dist}/${dist.name}/webapps" file="./release/PackXincoToWAR.bat"/>
        <copy todir="${dist}/${dist.name}/webapps" file="./release/PackXincoToWAR.sh"/>
        <mkdir dir="${dist}/${dist.name}/webapps/xinco"/>
        <copy todir="${dist}/${dist.name}/webapps/xinco">
            <fileset dir="build/web/">
                <include name="**/*"/>
            </fileset>
        </copy>
        <zip destfile="${dist}/${dist.name}.zip">
            <zipfileset dir="${dist}/${dist.name}" prefix="${dist.name}">
                <exclude name="**/.svn/**"/>
            </zipfileset>
        </zip>
        <antcall target="create-stand-alone-dist"/>
        <delete dir="${dist}/${dist.name}"/>
        <echo>Xinco version ${dist.name} release packages available in distribution folder!</echo>
    </target>

    <target name="create-stand-alone-dist">
        <!--Create XincoExplorer Stand alone Client-->
        <mkdir dir="${dist}/XincoExplorer Stand Alone Client"/>
        <!--Copy files in stand alone client folder-->
        <copy todir="${dist}/XincoExplorer Stand Alone Client">
            <fileset dir="release/stand alone client/">
                <include name="**/*"/>
            </fileset>
        </copy>
        <path id="build.classpath">
            <fileset dir="build/web/client">
                <include name="**/*.jar" />
            </fileset>
        </path>
        <!-- convert classpath to a flat list/string for use in manifest task -->
        <pathconvert property="mf.classpath" pathsep=";lib\">
            <path refid="build.classpath" />
            <flattenmapper />
        </pathconvert>
        <!--Create XincoExplorer.sh-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorer.sh" append="false">#!/bin/sh
            java -cp "lib\${mf.classpath}" com.bluecubs.xinco.client.XincoExplorer
        </echo>
        <!--Create XincoExplorer.bat-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorer.bat" append="false">java -cp "lib\${mf.classpath}" com.bluecubs.xinco.client.XincoExplorer</echo>
        <!--Create XincoExplorerHTTPS.bat-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorerHTTPS.bat" append="false">@rem # XincoExplorer for use over SSL/HTTPS
            @rem # ====================================
            @rem #
            @rem # When using self-signed certificates you need to import the server's certificate
            @rem # into your client keystore by running the script: genkeys.bat
            @rem #
            @rem # The server's certificate must be provided by your system administrator!
            @rem #
            java -cp "lib\${mf.classpath}" com.bluecubs.xinco.client.XincoExplorer
        </echo>
        <!--Create XincoExplorerHTTPS.sh-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorerHTTPS.sh" append="false">#!/bin/sh
            # XincoExplorer for use over SSL/HTTPS
            # ====================================
            #
            # You need to import the server's certificate
            # into your client keystore by running the script: genkeys.bat
            #
            # The server's certificate must be provided by your system administrator!
            #
            java -cp "lib\${mf.classpath}" com.bluecubs.xinco.client.XincoExplorer
        </echo>
        <!--Create XincoExplorerProxy.bat-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorerProxy.bat" append="false">@rem # XincoExplorer for use behind a Firewall / HTTP-Proxy
            @rem # ====================================================
            @rem #
            @rem # Please edit proxy options in command line:
            @rem # -Dhttp.proxyHost=192.168.50.9   # IP-Adress or Name of your Proxy
            @rem # -Dhttp.proxyPort=3128           # TCP-Port of your Proxy
            @rem #
            @rem # For more options, please consult Java docs...
            java -cp "lib\${mf.classpath}"  -Dhttp.proxyHost=192.168.50.9 -Dhttp.proxyPort=3128 com.bluecubs.xinco.client.XincoExplorer
        </echo>
        <!--Create XincoExplorerProxy.sh-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/XincoExplorerProxy.sh" append="false">#!/bin/sh
            # XincoExplorer for use behind a Firewall / HTTP-Proxy
            # ====================================================
            #
            # Please edit proxy options in command line:
            # -Dhttp.proxyHost=192.168.50.9   # IP-Adress or Name of your Proxy
            # -Dhttp.proxyPort=3128           # TCP-Port of your Proxy
            #
            # For more options, please consult Java docs...
            java -cp "lib\${mf.classpath}"  -Dhttp.proxyHost=192.168.50.9 -Dhttp.proxyPort=3128 com.bluecubs.xinco.client.XincoExplorer
        </echo>
        <!--Create genkeys.bat-->
        <echo file="${dist}/XincoExplorer Stand Alone Client/genkeys.bat" append="false">@echo off

            if not "%JAVA_HOME%" == "" goto gotJavaHome
            echo You must set JAVA_HOME to point at your Java Development Kit installation
            goto cleanup
            :gotJavaHome

            echo Importing Server's certificate into Client's keystore
            %java_home%\bin\keytool -import -v -trustcacerts -alias tomcat -file server.cer -keystore client.keystore -keypass changeit -storepass changeit

            :cleanup
        </echo>
        <!--Copy jars-->
        <copy todir="${dist}/XincoExplorer Stand Alone Client/lib/">
            <fileset dir="build/web/client">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        <!--Make zip-->
        <zip destfile="${dist}/${standalone.dist.name}.zip">
            <zipfileset dir="${dist}/XincoExplorer Stand Alone Client" prefix="XincoExplorerStandalone-${version_high}.${version_mid}.${version_low}"/>
        </zip>
        <delete dir="${dist}/XincoExplorer Stand Alone Client"/>
    </target>
    
    <target name="-pre-dist">
        <available file="${widget.dir}" property="widgetset.present" type="dir"/>
        <antcall target="do-compile-widgetset-if-needed"/>
    </target>
    
    <target name="update-lookup-lib">
        <fileset id="finder" dir="${netbeans.home}/.." includes="**/org-openide-util-lookup.jar" />
        <pathconvert property="lookup-lib" refid="finder" />
        <copy file="${lookup-lib}" tofile="../XincoLibs/org-openide-util-lookup.jar"/>
    </target>
    
    <target name="do-compile-widgetset-if-needed" depends="no-need-to-compile-widgetset" unless="widgetset.present">
        <echo>Compiling Vaadin Add-ons, please wait!</echo>
        <antcall target="compile-widgetset"/>
        <echo>Done!</echo>
    </target>
    
    <target name="no-need-to-compile-widgetset" if="widgetset.present">
        <echo>No need to recompile widgetset. If something was added/modified please run compile-widgetset target manually.</echo>
    </target>

    <target name="-pre-init" depends="check">
        <mkdir dir="${lib}"/>
        <echo>Updating version in Xinco/src/com/bluecubs/xinco/settings/settings.properties to: ${version_high}.${version_mid}.${version_low} ${version_postfix}</echo>
        <echo>To change this, change file build.ant.properties in xinco/</echo>
        <!-- We update the version number (Xinco project)-->
        <replaceregexp file="../Xinco/src/com/bluecubs/xinco/settings/settings.properties" flags="s"
                       match="version.high?=?(.*)"
                       replace="version.high = ${version_high}"
                       byline="true"/>
        <replaceregexp file="../Xinco/src/com/bluecubs/xinco/settings/settings.properties"
                       match="version.mid?=?(.*)"
                       replace="version.mid = ${version_mid}"
                       byline="true"/>
        <replaceregexp file="../Xinco/src/com/bluecubs/xinco/settings/settings.properties"
                       match="version.low?=?(.*)"
                       replace="version.low = ${version_low}"
                       byline="true"/>
        <if>
            <not>
                <equals arg1="${version_postfix}" arg2="" />
            </not>
            <then>
                <replaceregexp file="../Xinco/src/com/bluecubs/xinco/settings/settings.properties"
                               match="version.postfix?=?(.*)"
                               replace="version.postfix = ${version_postfix}"
                               byline="true"/>
            </then>
            <else>
                <replaceregexp file="../Xinco/src/com/bluecubs/xinco/settings/settings.properties"
                               match="version.postfix?=?_"
                               replace="version.postfix ="
                               byline="true"/>
            </else>
        </if>
        <replaceregexp file="../Xinco/nbproject/project.properties" flags="s"
                       match="mf.version.impl?=?(.*)"
                       replace="mf.version.impl = ${version_high}.${version_mid}.${version_low} ${version_postfix}"
                       byline="true"/>
        <replaceregexp file="../Xinco/nbproject/project.properties" flags="s"
                       match="mf.version.spec?=?(.*)"
                       replace="mf.version.spec = ${version_high}.${version_mid}.${version_low} ${version_postfix}"
                       byline="true"/>
        <replaceregexp file="../XincoExplorer/nbproject/project.properties" flags="s"
                       match="mf.version.impl?=?(.*)"
                       replace="mf.version.impl = ${version_high}.${version_mid}.${version_low} ${version_postfix}"
                       byline="true"/>
        <replaceregexp file="../XincoExplorer/nbproject/project.properties" flags="s"
                       match="mf.version.spec?=?(.*)"
                       replace="mf.version.spec = ${version_high}.${version_mid}.${version_low} ${version_postfix}"
                       byline="true"/>
        <!--Update the create database script version-->
        <replaceregexp file="src/java/com/bluecubs/xinco/core/server/db/script/init.sql"
                       match="version.high'?,?'(.*)'"
                       replace="version.high', '${version_high}', '${version_high}', '0', '0'"
                       byline="true"/>
        <replaceregexp file="src/java/com/bluecubs/xinco/core/server/db/script/init.sql"
                       match="version.mid'?,?'(.*)'"
                       replace="version.mid', '${version_mid}', '${version_mid}', '0', '0'"
                       byline="true"/>
        <replaceregexp file="src/java/com/bluecubs/xinco/core/server/db/script/init.sql"
                       match="version.low'?,?'(.*)'"
                       replace="version.low', '${version_low}', '${version_low}', '0', '0'"
                       byline="true"/>
        <replaceregexp file="src/java/com/bluecubs/xinco/core/server/db/script/init.sql"
                       match="'version.postfix'.*"
                       replace="'version.postfix', '0', '${version_postfix}', '0', '0');"
                       byline="true"/>
        <available file="${widget.dir}" property="widgetset.present" type="dir"/>
    </target>
    
    <target name="build-language-master-pack">
        <property name="language-pack-name" 
                  value="XincoLanguageMasterPack-${version_high}.${version_mid}.${version_low} ${version_postfix}" />
        <delete includeemptydirs="true">
            <fileset dir="${dist}" includes="XincoLanguageMasterPack-*/**"/>
        </delete>
        <mkdir dir="${dist}/${language-pack-name}"/>
        <!--Add sample translation files-->
        <copy todir="${dist}/${language-pack-name}">
            <fileset dir="../Xinco/src/com/bluecubs/xinco/messages">
                <include name="_*.properties"/>
            </fileset>
        </copy>
        <!--Now zip it-->
        <zip destfile="${dist}/${language-pack-name}.zip">
            <zipfileset dir="${dist}/${language-pack-name}" prefix="${language-pack-name}"/>
        </zip>
        <!--Clean after yourself-->
        <delete includeemptydirs="true">
            <fileset dir="${dist}" includes="XincoLanguageMasterPack-*/**" excludes="*.zip"/>
        </delete>
    </target>
    
    <target name="check" depends="widgetset-init">
        <condition property="widgetset.present">
            <available file="${client-side-destination}" type="dir"/>
        </condition>
        <fail unless="widgetset.present" message="Widgetset not found at ${client-side-destination}. Please run the compile-widgetset first and then retry."/>
    </target>
    
    <target name="clean-widgets">
        <if>
            <isset property="widgetset.present"/>
            <then>
                <delete dir="${widget.dir}"/>
            </then>
        </if>
    </target>
    
    <target name="deploy-demo">
        <fail unless="j2ee.server.home" message="j2ee.server.home not defined!"/>
        <!--Copy the demo context file (if present)-->
        <copy todir="web/META-INF" file="${demo.context.path}" failonerror="false"/>
        <!--Copy the demo persistence file (if present)-->
        <copy todir="src/conf" file="${demo.persistence.path}" failonerror="false"/>
        <!--Display build number as postfix-->
        <replaceregexp file="build.ant.properties"
                       match="version.postfix?=?(.*)"
                       replace="version.postfix = ${demo_version_postfix}"
                       byline="true"/>
        <!--Build with the demo context file-->
        <antcall target="dist"/>
        <!--Delete the war-->
        <delete file="${j2ee.server.home}/webapps/${war.name}" quiet="true"/>
        <!--Delete the folder-->
        <delete dir="${j2ee.server.home}/webapps/xinco" quiet="true"/>
        <!--Now copy the new one-->
        <copy todir="${j2ee.server.home}/webapps" file="${dist.war}"/>
    </target>
    
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
        <classpath>
            <pathelement location="../tools/PMD/pmd-4.3.jar"/>
        </classpath>
    </taskdef>

    <target name="pmd">
        <mkdir dir="../reports/pmd"/>
        <delete file = "../reports/pmd/pmd.xml"/> 
        <touch file = "../reports/pmd/pmd.xml" /> 
        <pmd rulesetfiles="basic,design">
            <formatter type="xml" toFile="../reports/pmd/pmd.xml"/>
            <fileset dir="./src">
                <include name="**/*.java"/>
            </fileset>
        </pmd>
    </target>
    
    <target name="publish" description="This will publish the release on Source Forge">
        <fail unless="sf.usr" message="Please define sf.usr in the nbproject/private/private.properties or pass as build parameter to ant"/>
        <fail unless="sf.pwd" message="Please define sf.pwd in the nbproject/private/private.properties or pass as build parameter to ant"/>
        <fail unless="sf.hst" message="Please define sf.pwd in the nbproject/private/private.properties or pass as build parameter to ant"/>
        <echo>Publishing ${dist.name}</echo>
        <scp todir="${sf.usr},xinco:${sf.pwd}@${sf.hst}:/home/pfs/project/x/xi/xinco/xinco DMS Server/${dist.name}" 
             trust="true" 
             sftp="true"
             file="dist/${dist.name}.zip"/>
        <echo>Done!</echo>
        <echo>Publishing ${dist.name}</echo>
        <scp todir="${sf.usr},xinco:${sf.pwd}@${sf.hst}:/home/pfs/project/x/xi/xinco/XincoExplorer StandaloneClient/${standalone.dist.name}" 
             trust="true" 
             sftp="true"
             file="dist/${standalone.dist.name}.zip"/>
        <echo>Done!</echo>
        <echo>tagging code in SVN as ${dist.name}</echo>
        <antcall target="svntag"/>
        <echo>Done!</echo>
    </target>
    
    <!-- SVN and SVN-ANT Tasks properties -->
    <property name="svn.base.url" value="${svn.repository.url}/${svn.project.base.path}"/>
    <property name="svnant.lib.dir" location="svn-ant-lib"/>
    <property name="svnant.javahl" value="false" />
    <property name="svnant.svnkit" value="true" />
    <!-- SVN and SVN-ANT Tasks properties -->
    <!-- *************************************************************** -->
    <!--   Set-Up of SVN-ANT classpath                                   -->
    <!-- *************************************************************** -->  
    <path id="svnant.classpath">
        <fileset dir="../Tools/svn-libs">     
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- *************************************************************** -->
    <!--   Loading of SVN task                                           -->
    <!-- *************************************************************** -->  
    <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />
    
    <!-- *************************************************************** -->
    <!-- tool-availability: Determine if SVN-ANT is available.           -->
    <!-- *************************************************************** -->  
    <target name="tool-availability">
        <available resource="org/tigris/subversion/svnant/svnantlib.xml"
                   classpathref="svnant.classpath"
                   property="available.svnant"/>
    </target>
    
    <!-- ****************************************************************  -->
    <!-- does-svnant-exist: depends on tool-availablility and              -->                   
    <!--                    displays error message                         -->
    <!-- ***************************************************************** -->
    <target name="does-svnant-exist" depends="tool-availability">
        <fail unless="available.svnant">
            SVN-ANT is not available, cannot perform tagging or checkout/export svn ant task.
        </fail>
    </target>
    
    <!-- ****************************************************************** -->
    <!-- svntag: performs tagging using properties from                              -->
    <!--         build.properties and uses SVNANT tasks                              -->
    <!-- ******************************************************************* -->
    <target name="svntag" description="tags individual project using svnant task" depends="does-svnant-exist">    
        <fail unless="project.name"/>
        <fail unless="svn.base.url"/>
        <fail unless="svnant.javahl"/>
        <fail unless="svnant.svnkit"/>
        <fail unless="svn.username"/>
        <fail unless="svn.password"/>
        <property name="tag.name"  value="${dist.name}"/>
        <property name="svn.tag.message" value="Tagging Project ${project.name} with tag name ${tag.name} from trunk "/>
        <property name="src.url"  value="${svn.base.url}/trunk/"/>
        <property name="dest.url" value="${svn.base.url}/tags/${tag.name}"/>

        <echo message="${svn.tag.message}"/>
        <echo message="${src.url}"/>
        <echo message="${dest.url}"/>

        <svn javahl="${svnant.javahl}" svnkit="${svnant.svnkit}" username="${svn.username}" password="${svn.password}">
            <copy srcUrl="${src.url}" destUrl="${dest.url}" message="${svn.tag.message}"/>    
        </svn>
    </target>


<!-- ****************************************************************** -->
<!-- svnexport: performs export using properties from                            -->
<!--            build.properties and uses SVNANT tasks                           -->
<!-- ****************************************************************** -->
    <target name="svnexport" description="exports individual project using svnant task" depends="does-svnant-exist">    
        <fail unless="tag.name"/>
        <fail unless="project.name"/>
        <fail unless="svn.base.url"/>
        <fail unless="svnant.javahl"/>
        <fail unless="svnant.svnkit"/>
        <fail unless="svn.username"/>
        <fail unless="svn.password"/>
        <property name="svn.tag.message" value="Exporting Project ${project.name} with tag name ${tag.name}"/>
        <property name="src.url"  value="${svn.base.url}/tags/${tag.name}"/>
        <property name="destPath" value="${dest.path}"/>
        <echo message="${svn.tag.message}"/>
        <svn javahl="${svnant.javahl}" svnkit="${svnant.svnkit}" username="${svn.username}" password="${svn.password}">
            <export srcUrl="${src.url}" destPath="${destPath}/${project.name}"/>  
        </svn>
    </target>

<!-- ****************************************************************** -->
<!-- svnbranch: creates a new branch using properties from                       -->
<!--            build.properties and uses SVNANT tasks                           -->
<!-- ****************************************************************** -->
    <target name="svnbranch" description="creates a new branch for individual project using svnant task">    
        <fail unless="new.branch.name"/>
        <fail unless="project.name"/>
        <fail unless="svn.base.url"/>
        <fail unless="svnant.javahl"/>
        <fail unless="svnant.svnkit"/>
        <fail unless="svn.username"/>
        <fail unless="svn.password"/>
        <property name="svn.branch.message" value="Creating new branch for Project ${project.name} with new branch name ${new.branch.name} from trunk"/>
        <property name="src.url"  value="${svn.base.url}/trunk/"/>
        <property name="dest.url" value="${svn.base.url}/branches/${new.branch.name}"/>

        <echo message="${svn.branch.message}"/>
        <echo message="${src.url}"/>
        <echo message="${dest.url}"/>

        <svn javahl="${svnant.javahl}" svnkit="${svnant.svnkit}"   
             username="${svn.username}" password="${svn.password}">
            <copy srcUrl="${src.url}" destUrl="${dest.url}" message="${svn.branch.message}"/>                       
        </svn>
    </target>
</project>
